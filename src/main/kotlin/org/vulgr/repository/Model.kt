package org.vulgr.repository

import org.apache.commons.lang3.builder.EqualsBuilder
import org.apache.commons.lang3.builder.HashCodeBuilder
import org.neo4j.ogm.annotation.*


@NodeEntity(label = "CVE")
data class Cve(@Id @GeneratedValue
               var id: Long? = null,

               @Property(name = "cveId")
               var cveId: String? = null,

               @Property(name = "summary")
               var summary: String? = null,

               @Relationship(type = "Affects", direction = Relationship.OUTGOING)
               var products: List<ProductEntity>? = null,

               @Relationship(type = "HasReference", direction = Relationship.OUTGOING)
               var references: List<Reference>? = null,

               @Relationship(type = "CommonWeakness", direction = Relationship.OUTGOING)
               var cwes: List<Cwe>? = null)

@NodeEntity(label = "Product")
data class ProductEntity(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "product")
        var product: String? = null,

        @Property(name = "cpe")
        var cpe: String? = null,

        @Property(name = "update")
        var update: String? = null,

        @Property(name = "version")
        var version: String? = null,

        @Relationship(type = "Affects", direction = Relationship.INCOMING)
        var cves: List<Cve>? = null,

        @Relationship(type = "Owns", direction = Relationship.INCOMING)
        var vendor: Vendor? = null,

        @Relationship(type = "IsPart", direction = Relationship.OUTGOING)
        var part: CpePart? = null)

@NodeEntity(label = "Vendor")
data class Vendor(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "vendorId")
        var vendorId: String? = null,

        @Relationship(type = "Owns", direction = Relationship.OUTGOING)
        var products: List<ProductEntity>? = null) {

    override fun toString(): String {
        return "Vendor { vendorId: $id }"
    }

    /**
     * We need to override hashcode to ignore the products when
     * computing the hashcode, or we can get infinite recursion
     * when trying to map query results, which contain an "Owns"
     * relationship, to entities.
     */
    override fun hashCode(): Int {
        val hcb = HashCodeBuilder()
        hcb.append(id)
        hcb.append(vendorId)
        return hcb.toHashCode()
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) {
            return true
        }
        if (other !is Vendor) {
            return false
        }
        val that = other as Vendor?
        val eb = EqualsBuilder()
        eb.append(id, that!!.id)
        eb.append(vendorId, that.vendorId)
        return eb.isEquals
    }
}

@NodeEntity(label = "Reference")
data class Reference(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "href")
        var href: String? = null,

        @Relationship(type = "IsRefType", direction = Relationship.OUTGOING)
        var refType: ReferenceType? = null,

        @Relationship(type = "FromRefSrc", direction = Relationship.OUTGOING)
        var refSrc: ReferenceSource? = null)

@NodeEntity(label = "ReferenceType")
data class ReferenceType(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "refType")
        var refType: String? = null,

        @Relationship(type = "IsRefType", direction = Relationship.INCOMING)
        var ref: Reference? = null)


@NodeEntity(label = "ReferenceSource")
data class ReferenceSource(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "refSrc")
        var href: String? = null,

        @Relationship(type = "FromRefSrc", direction = Relationship.INCOMING)
        var ref: Reference? = null)


@NodeEntity(label = "CWE")
data class Cwe(
        @Id @GeneratedValue
        var id: Long? = null,

        @Property(name = "cweId")
        var cweId: String? = null,

        @Relationship(type = "CommonWeakness", direction = Relationship.INCOMING)
        var cves: List<Cve>? = null)

sealed class CpePart {
    @Id
    @GeneratedValue
    var id: Long? = null

    @Property(name = "partId")
    var partId: String? = null

    @Relationship(type = "IsPart", direction = Relationship.INCOMING)
    var products: List<ProductEntity>? = null
}

@NodeEntity(label = "OperatingSystem")
class OperatingSystemPart : CpePart()

@NodeEntity(label = "Application")
class Application : CpePart()

@NodeEntity(label = "Hardware")
class Hardware : CpePart()
